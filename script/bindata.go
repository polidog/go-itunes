// Code generated by go-bindata.
// sources:
// files/mac/itunes.js
// files/win/iTunes.js
// DO NOT EDIT!

package script

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _filesMacItunesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x6f\x9b\x40\x10\xbd\xfb\x57\x6c\x73\x01\xa4\xc8\xea\xd9\x88\x43\x55\xf5\xd2\x43\x1a\xc9\xe9\x29\x8a\xaa\x09\x1e\xd3\x55\x60\x41\xfb\xe1\x16\x45\xfc\xf7\x6a\xd6\x18\x98\x75\xe3\xac\x92\x4b\x38\xc1\xce\xdb\x37\x6f\x1e\x33\x73\x00\x2d\xa0\xeb\x44\x21\xbe\x74\x5d\x2d\x4b\xb0\xb2\x55\x69\x22\xef\x9c\x42\x93\x64\x2b\x8a\xe3\x01\x95\x0d\x11\xdb\xde\x58\x6c\xc4\x37\x8a\x11\x70\xb5\xda\x3b\x55\x52\x4c\x54\x68\xbf\x3a\xad\x51\xd9\x3b\x0d\xe5\x53\x9a\x89\xe7\x95\x10\x42\x10\x97\xa5\x13\x51\x50\xce\x75\xc9\x40\x1e\xa2\xd1\x3a\xad\x46\x3c\x3d\x0a\x1a\xdc\x1c\x6f\xad\xe9\x3d\xcd\xae\xa7\x18\x68\x2b\x8d\x3d\x45\x8f\x5f\x2c\x5e\x3f\xba\x66\x0a\xd3\xc7\x32\x5a\x82\xc5\xaa\xd5\xfd\x09\x70\xfa\x5e\x62\xac\x9c\xb3\xd3\xfb\xa8\x72\x58\x0d\x8b\x72\x3b\x70\x06\x6f\x6b\xe8\xa5\xaa\x58\xad\x1a\x8d\xab\xc9\xb8\xe7\xc4\x58\xb0\xce\x24\xc4\xe5\x70\xf0\x08\xb9\x17\xa9\x34\xd3\xbd\x6c\x51\x34\x99\xe3\x59\xd3\x2c\x9f\x0e\x8f\x6c\xf7\x27\xaa\x07\x51\x88\x3d\xd4\x06\xf3\x51\xd2\x0b\x18\x4a\x98\xb3\x60\x57\x43\x8f\xfa\x17\x61\xd0\x43\x7c\x3a\x7f\xb8\xa5\x33\xfe\x2b\x8e\xb7\x72\x56\xb1\xb1\xa0\x6d\x58\x31\xd5\xf3\xe9\x52\x41\x35\xf4\xbc\x9e\xe0\x57\xd3\xc3\x8d\xba\xe6\x31\xff\x1f\x92\xcd\x79\x7f\x05\x38\x56\xe0\xe6\xbc\xbc\x19\x3e\x30\xef\x02\x3d\xb3\x16\xef\xf3\x7c\x2b\x32\xc1\x10\x9a\xd6\x76\xff\xf3\xec\x82\x65\x74\xe5\x7d\x96\x7d\x14\x2b\xf8\xc0\xd4\xd0\xdf\xe0\xdf\x60\x3b\xd0\x55\x35\x9f\xe6\xaf\x29\xe1\xd5\xc6\x34\xc7\x9b\xc5\xde\x6a\x3c\xc8\xd6\x99\x73\xc1\x1d\x8f\x7c\x14\xd1\x8b\x9e\x1a\x65\x8c\x9a\xce\x6e\x8b\xa2\x28\x8e\x39\xa4\xaa\x12\x22\x99\x59\xb4\x53\x29\xe8\xea\x70\xe2\x30\x7f\xa4\x2d\x7f\xfb\xa3\xfb\xcf\x0f\xcb\x66\x2d\xc1\xa0\xb8\xf2\xd5\x5c\x6d\x58\x07\x8e\x79\xbf\x6f\x7f\xdc\xac\x8d\xd5\x52\x55\x72\xdf\xa7\xbc\x83\x5f\xeb\xe2\xcb\x56\x31\xe8\xb0\x98\x16\x7a\x1e\x35\xc2\x53\x1e\xe8\xf4\xab\x35\x4a\x27\x5f\xed\x59\x04\x75\x0d\x7d\x14\x33\x5f\xa1\x11\xcc\xb4\x0b\x22\x99\x17\x7b\x26\x82\x98\x66\x2e\xce\x0c\x3e\xb6\x31\x6e\x68\x3c\x44\x53\x07\x43\x76\x91\x7e\x87\x7b\x70\xb5\x7d\x6f\xab\x05\xcb\x6c\x02\x34\x68\x0c\x54\x34\x6d\xc9\x4f\x65\x5c\xd7\xb5\xda\xe2\x4e\x94\x6d\xd3\x80\xda\x25\x41\xc7\xbd\x24\x94\x46\xf2\x5f\x00\x00\x00\xff\xff\x56\x2c\x37\xec\x5f\x09\x00\x00")

func filesMacItunesJsBytes() ([]byte, error) {
	return bindataRead(
		_filesMacItunesJs,
		"files/mac/itunes.js",
	)
}

func filesMacItunesJs() (*asset, error) {
	bytes, err := filesMacItunesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/mac/itunes.js", size: 2399, mode: os.FileMode(420), modTime: time.Unix(1495943819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filesWinItunesJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xff\x6f\xdb\xb8\x15\xff\xdd\x7f\x05\x43\x0c\x0e\x19\xc9\xb2\x52\x74\xed\x9d\x54\xce\xcb\xb2\x2b\x76\x03\xd6\x1e\x96\xde\x0d\x9b\xe5\x02\x94\x44\xd9\x4c\x65\x4a\xa5\xa8\x34\x81\xad\xff\x7d\x20\x45\xd9\x92\xe2\xe6\xba\x1c\x30\x9c\x7f\x90\xc4\xc7\xf7\xf5\xf3\x1e\xdf\xa3\xe7\x17\xe0\xef\x37\xef\xdf\xbd\x00\x17\xf3\xc9\x1d\x95\x66\x11\xea\xc7\x7e\x8f\xf4\x8b\xec\x1a\x1c\x4e\x50\x56\x8b\x44\xf1\x42\x20\xbc\xeb\x3e\xc1\x27\x44\xf1\x4e\x32\x55\x4b\x01\xe8\x9b\x4b\x7f\x01\x7d\xe8\xd0\x80\x36\x07\x8e\x42\x73\x94\x5e\x4e\x2b\xf5\xa3\x48\xd9\x3d\xf1\x43\xcb\x5f\x7a\x8a\x55\x0a\x51\xbc\x38\x87\xe7\x0e\xf5\x24\x2b\x73\x9a\x30\x54\xba\x07\x4b\x14\xef\xb4\x43\x09\x91\x4b\xba\xea\xe4\xd4\x43\xc9\x8a\x0c\x24\x84\x10\x58\x29\xc9\xc5\x1a\x2e\x92\x00\x46\x51\x0d\x1d\x04\x7d\xdf\xd7\x2e\x78\xc9\x86\xca\xeb\x22\x65\x57\x0a\xf9\xd8\x53\xc5\x8d\xe1\x44\x97\xaf\x30\xf6\xaa\x9c\x27\x0c\xcd\x5e\xe2\x06\x3b\xe7\xf0\x3c\x30\xf6\xf5\xd7\xd1\xed\x1c\x51\xf7\xd6\x5a\x77\x53\x77\xe3\x6e\xdd\x35\x61\x6e\xe6\xc6\xe4\x56\xfb\x12\x4f\xa7\xd6\x8f\x58\xfb\x51\xc4\xb7\x2c\x51\xf0\x48\xf4\x54\x61\xa0\x23\x04\x76\x3a\xe1\x74\x8a\x62\xd2\xed\x20\x8a\x71\x68\xb9\xf9\x63\x36\xee\x25\x34\xcf\xd1\xad\x4b\xdd\x18\xe3\xb0\xfa\xc2\x55\xb2\x41\x9d\x76\xbc\x4b\x68\xc5\x40\x17\x7e\x60\x91\x29\x50\x8c\xc3\x76\x47\xd4\xdb\x98\xc9\xc3\x0e\xaf\xde\x72\xc1\x15\x43\x31\x5e\x58\x24\x62\x1c\x40\x51\xe7\x39\xb4\x12\x71\x51\xe4\x8c\x0a\x18\x74\x0a\xf2\xfc\x20\x7e\x10\xb1\xbc\x36\xdc\x80\x67\xe8\x2c\xc6\x2d\x93\x55\x36\x01\x00\x00\xe6\x10\x11\x66\x64\xb9\x0a\x79\x86\xde\x1b\x66\xaf\x94\x85\x2a\x74\x00\x87\x64\x78\xb4\x2c\xf3\x07\x14\x63\x1d\xfe\xb2\xd5\x09\xae\xa4\xa4\x0f\x2b\x88\x77\x5b\x12\x7b\x39\x13\x6b\xb5\x09\xb3\x42\xa2\x84\xf8\x61\xf2\x66\x1b\x26\x0e\xb9\xc4\xd9\x32\x59\x91\x1c\x25\x6e\x8c\xf7\x7b\x6b\x78\x43\x32\xcb\x4f\x08\xf1\x17\x70\xb9\x82\x01\x5b\xc0\x65\x24\xa0\xc3\x9c\xcc\xbb\x2d\xb8\x40\xd0\x35\x4b\xec\x40\xfd\x5e\x3b\x70\x05\x03\xb8\x84\xc7\x6d\x88\x35\x2d\x64\x64\xdd\x95\xdb\xa6\xe1\x19\xe2\x87\xcc\xf2\x5e\xba\xb5\x93\xfc\xab\x4e\x76\x02\xda\xd7\x63\xa9\x4e\xa7\x28\x25\x9a\xe6\xa2\x0d\xc9\x51\xaa\xd3\x3b\x9d\x66\x5e\x59\x57\x1b\x54\xa0\x14\x3b\x88\x2d\x60\x00\x60\x00\x03\x88\x9d\x0d\xc6\x0d\xcb\x2b\x06\xb4\xfa\x14\x70\x01\x62\xfc\x08\xd0\x0d\xad\xde\x7f\x11\x3f\xc9\xa2\x64\x52\x3d\xb4\x95\x13\xbb\x29\x9e\x4e\xbf\xd1\xc6\x23\xf0\x76\x8d\x01\x6f\xf7\x34\x78\x0d\x0c\xe0\x6e\x08\x9e\x49\xbf\xfe\xc1\x66\x84\xa2\x86\xd1\x42\xf2\x57\xaa\xd8\xa0\x1e\xf4\x81\x38\xeb\x9f\x01\x7c\x92\x85\xf4\x5a\xd0\xb8\xb0\xd5\x86\x57\xde\x1d\xcd\x6b\xf6\x3e\x43\x18\x2f\xcc\x7a\xcd\xd4\xcf\x1f\xae\xdf\xd6\x79\xfe\x6f\x46\x25\xc2\x0e\x9c\x41\xe7\x13\xea\xed\xfd\xa3\x10\x6a\x83\xb0\x73\x79\x62\x4f\xfb\x80\x30\x76\xe0\x87\xd1\xc6\xdf\x8a\x5a\x56\x66\x27\x18\xab\xe3\xa2\x56\xec\xf4\xde\x0d\x4b\x0a\x91\xb6\x7b\xff\x81\x81\xae\xda\xc6\xb5\x27\xe1\x51\xa4\xef\xcc\xf9\x7d\x4c\xff\x4b\x7b\x4a\xbf\x05\x9a\x21\x22\x4d\xa8\x7b\xd9\x67\x32\x5f\x46\xb5\xee\x91\xfa\x49\xd3\xa8\xf6\x5f\xf9\xfe\xcc\xbc\x5e\x46\xb5\xff\xda\xcf\xa2\xfa\xf2\x75\xfc\xd2\x3c\xff\x18\xd5\x2f\x7c\x3f\x99\x99\x57\xa6\x9f\x2f\xbe\x33\x8b\x17\x66\xf1\xca\x37\x8b\x57\x59\x54\x67\x2c\xd3\xcf\x2c\xd3\xa4\x2c\xcb\xb2\xd5\x7c\xed\x9a\x5a\x28\xb5\xc5\x28\x82\xd1\xbd\xb6\x73\x7f\x99\x45\xf7\xaf\xb3\x59\x74\xff\x7d\xf6\x7f\xf0\x80\xb9\xc2\x95\x64\x07\x4d\xc8\xdf\x41\x3d\x24\x62\xe8\xc2\x48\x99\x4f\xa5\x3f\x85\xf9\x14\xfa\x53\x33\x25\x66\x99\xe9\xa5\x34\x9f\x12\xba\x66\x44\x44\x11\x3c\x77\x61\x14\x19\x62\x14\xc1\xc6\xe5\xe1\xb1\xa2\x75\x0a\xbc\xf6\x84\xf3\xec\x61\x58\xca\xc3\xbd\x63\xa2\xa8\x7b\xeb\x26\xed\x88\x49\x43\x41\x18\x81\xb0\xa7\xd1\x8c\x37\xdb\xc5\xb1\x39\xfc\xc4\x0f\xd3\x37\x49\x98\xea\xde\x22\x1c\x02\x01\x0c\x4d\x67\x38\x31\x0f\xa7\x53\x24\x48\x82\xb5\x3a\xc4\xc9\x2d\x3e\x74\xaf\xdb\xb3\xd1\xa4\xe9\xd3\x6d\x57\xdb\xef\x3b\xa2\x6d\x09\x67\x3d\x4f\xb0\xda\xc8\xe2\x0b\xf8\x41\xca\x42\x22\x38\x0c\x0d\xe2\xee\xb4\xe7\x08\xc2\x36\xfd\x3b\x08\x03\xda\xe0\x66\x8c\x55\x49\x65\xc5\x4e\xe0\x64\xe8\x7d\x8c\x58\xef\xb6\x91\x20\xea\xa6\x2d\x62\x6b\x33\x8a\xe9\x32\x35\x23\xe6\xf4\x34\x36\xb0\xad\xff\xa7\x9e\xb9\xd6\x3d\x33\x23\x89\xf9\x74\xb3\x33\x42\xee\x0a\x9e\x02\x7f\x11\x2f\xd7\x2b\x92\x05\x29\xcb\x99\x62\x40\xaf\x0e\xc1\xb2\x56\x98\xba\xba\xcf\x36\x26\x9d\x2e\x25\x76\x64\x52\x1c\x7e\x1e\x5c\x7e\x3e\x77\xb7\x9e\xe9\x14\x51\x72\xbc\xf5\x7c\x1e\xdc\x7a\xec\x48\x7d\xde\x9d\xc6\xe4\x7d\xfe\x71\x19\xad\xdc\x60\xd7\x44\xd5\xea\xe2\x0f\x73\x6b\xf5\x60\x6e\x1e\x45\x68\x11\x2c\x75\x2d\xcf\xe3\x4c\x48\xb5\xda\xd7\x4b\x7f\xf6\x3d\x9d\x65\x57\xb3\xb7\xab\xdd\xcb\x06\xcf\xd7\x2e\xfc\x33\xc4\x47\x11\xb8\xfc\xa8\xf9\x45\x24\x57\x17\x70\xaf\x64\xcd\xf6\x19\xcd\x2b\xb6\xd7\xad\x6c\x3f\x5b\x44\xa9\x83\x16\x41\xe4\x45\xe9\x05\x5e\x68\xed\xec\x87\xd5\xd2\x89\x66\x2b\xbd\x83\x17\x5d\x47\x30\xd3\x61\xd5\x57\x8c\x16\xc1\xc7\x7d\xb0\x77\xb1\x16\xaf\x2e\xa2\x25\x76\xb4\x71\x88\xb1\xbd\x5b\x80\x94\xb0\x3b\x9a\x23\x88\xa0\x43\x1d\x88\x21\x76\x6d\xbe\xd9\xe0\xea\xb4\x48\x90\x2e\xb8\xb4\xd1\xc2\x41\x1a\xb6\xc5\x2a\xd8\x17\x70\xf3\x20\x14\xbd\xef\x97\xad\xa9\x34\x88\xc3\xa6\xc1\x08\x87\x93\xc9\xfc\xe2\x99\xbf\xf9\xc4\xdc\x9a\xf9\x87\x5a\xb0\x0a\x10\xf0\xaf\x9b\x44\xf2\x52\x79\xd7\x92\x51\xc5\xda\xc2\x43\xb0\xdd\xf6\xae\xca\x32\xe7\x09\x6d\x2b\x3e\xb4\x92\xd5\x3f\x6b\x21\xb8\x58\x03\x02\x8e\x6d\x1c\xec\x0c\x5a\x5d\x33\x97\x35\x0b\x27\x8d\x95\x58\x33\x75\x5d\x4b\xc9\x84\xfa\x20\x69\xf2\xe9\x94\x9c\xb9\xb9\xf6\x78\xda\x8b\x19\xcf\x00\xe2\xd5\x4f\x39\x7d\xd0\x85\x83\x3b\x66\xfd\x4b\x86\x0a\xad\xbf\xd7\x8f\x54\xf4\x9c\x1a\x1e\x7f\x74\xd4\xa5\x7f\x82\x6e\x59\x30\xd0\xea\xbd\xa3\x5b\xe6\x0e\x98\xa8\x54\xbc\x52\x23\xb6\x2b\x43\x1c\x31\xe6\x71\xbd\x1d\xf3\x69\xda\x81\x4b\xff\x47\x31\x6f\x60\xba\xe2\x6e\xec\xac\x2e\x52\xcb\x31\x69\x3a\xe0\x2d\x12\x4f\x00\x6f\x71\xd0\x8c\x4c\xde\x28\xaa\x18\x20\x84\x80\xcb\x63\x32\x2a\x55\x94\x4f\xe8\xb1\x0a\x6e\x54\x51\x22\xeb\xe2\x57\xe0\x2b\x3e\x05\x26\xcf\x3a\x92\xa3\x72\x2a\xd5\xaf\x6b\xd7\x1c\x23\xed\xa3\x1a\x41\x3d\xa5\x49\xb1\xdd\x52\x91\xea\x62\x6d\xb5\x58\x58\x95\x66\x0c\xc6\x92\xee\xa4\x1d\xe4\x39\x7d\x08\x06\xfe\x74\x1b\xb4\xae\x58\xf0\xd8\xb5\xbe\x7b\x9a\xa5\xf3\xef\x1b\x11\x30\x99\xb2\x26\x34\xc4\x41\x1f\x68\x4b\x17\xec\x5e\x3d\x6d\xf9\x1d\xbb\x3f\xc6\x3f\xb2\x7e\x02\xa1\xbe\xd1\x52\xb2\x3b\x5e\xd4\xd5\xaf\x84\x66\xb9\x9e\x69\x24\xa3\x29\x2b\xea\xaf\x05\xa1\x93\x55\x48\xbe\xe6\x82\xe6\xbf\x14\xf9\xf0\x48\xf0\xe1\x32\x65\x39\x7d\x00\x04\xbc\xf0\x87\xf4\x9e\xfc\xf1\x58\xdf\x14\xb5\x48\x7f\x29\xf2\x7a\xcb\xc2\xc9\x31\x24\xd3\x1d\x6c\x33\x42\x18\x4c\xa7\xe0\x2b\xcd\xc2\xb8\x5e\x48\x80\x38\x20\x7d\x0b\x21\xe0\xe0\x4f\x04\xf8\x21\xe0\xb3\xd9\x58\xa0\x7f\x1a\x8e\xf6\x4f\x3a\x05\x66\xfa\x84\x8d\x85\xbb\xce\x7a\x93\x33\x56\x22\x13\x30\x1e\x72\x35\xc3\x65\xaf\x62\xd0\x88\xf3\xa4\x23\xfd\x48\x8e\x8d\xe5\xb9\x55\xab\x73\xcb\xc5\xef\x27\xb5\x67\x4f\x24\xf3\x24\x1c\xfe\x18\xcd\xe3\xd9\x1f\xc3\x79\x28\x06\x9d\x7a\xf0\x66\x54\x13\x8e\xf3\x5b\x6a\xc1\xf9\xcd\xb5\xf0\x9c\x14\x9a\x88\x99\xba\x33\x3e\xf4\x92\xd8\x12\x4e\x74\x82\x61\x1c\x77\x36\x03\xad\xf9\xae\xf3\x52\xb9\xee\x5f\x11\xae\xe4\xba\xde\x32\xa1\x2a\xef\x47\xc5\xb6\xfa\x52\x57\x95\x39\x57\xe8\x1c\x9c\xe3\xb0\xdf\xaa\x01\x31\xa2\x4b\x7f\xd5\x92\x4b\x7b\x6f\xed\xe8\x97\x2b\xb0\xdf\xdb\x11\x37\x99\xe8\x64\x77\x3d\x7e\x69\x3f\x56\x9d\xc7\x9d\x6d\x96\x6c\x8a\xc7\x5c\xa8\xd3\x8c\xf5\xbc\xe8\x8f\xd2\x81\xdc\x18\x3f\xa6\x2f\x56\x01\x80\x3f\x8b\xaa\x2e\xcb\x42\x2a\x96\x76\xae\xc3\xc6\xa8\x9a\xfc\x37\x00\x00\xff\xff\xdc\xa6\x80\x8d\x66\x14\x00\x00")

func filesWinItunesJsBytes() ([]byte, error) {
	return bindataRead(
		_filesWinItunesJs,
		"files/win/iTunes.js",
	)
}

func filesWinItunesJs() (*asset, error) {
	bytes, err := filesWinItunesJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "files/win/iTunes.js", size: 5222, mode: os.FileMode(420), modTime: time.Unix(1495942568, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"files/mac/itunes.js": filesMacItunesJs,
	"files/win/iTunes.js": filesWinItunesJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"files": &bintree{nil, map[string]*bintree{
		"mac": &bintree{nil, map[string]*bintree{
			"itunes.js": &bintree{filesMacItunesJs, map[string]*bintree{}},
		}},
		"win": &bintree{nil, map[string]*bintree{
			"iTunes.js": &bintree{filesWinItunesJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

